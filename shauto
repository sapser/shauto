#!/bin/bash
#
#shell自动化运维工具

#引用未定义的变量时报错并退出脚本
set -o nounset
#命令执行失败时报错并退出脚本
#set -o errexit


############################
#     可自定义全局变量     #
############################
#
#hosts文件路径
HOSTS_FILE="hosts"

#日志文件路径
LOG_FILE="$(basename $0).log"

#远程ssh用户
REMOTE_USER="chenwei" 

#远程ssh端口
REMOTE_PORT=22

#远程shell
REMOTE_SHELL="/bin/sh"

#sudo到哪个用户
SUDO_USER="root"

#sudo命令参数
SUDO_ARGS="-H"

#私钥文件路径
PRIVATE_KEY_FILE=""

#ssh连接超时时间
SSH_TIMEOUT=10

#并发数量
FORKS=5


################################
#     以下部分不可手动修改     #
################################
#
#任务开始执行时间
DATE="$(date +'%Y%m%d%H%M%S')"

#本地存放临时文件目录
TEMP_DIR="${HOME}/.$(basename $0)/${DATE}"

#命令文件
CMD_FILE="${TEMP_DIR}/cmd.sh"

#远程主机存放临时文件目录
REMOTE_TEMP_DIR="/home/${REMOTE_USER}/.$(basename $0)/${DATE}"

#远程命令文件
REMOTE_CMD_FILE="${REMOTE_TEMP_DIR}/cmd.sh"

#ssh连接选项
#StrictHostKeyChecking=no不会检查~/.ssh/known_hosts文件
#UserKnownHostsFile=/dev/null不记录信息到~/.ssh/known_hosts文件
SSH_ARGS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

#sudo执行命令时为ssh连接分配伪终端
ALLOC_TTY="-T"

#sudo完整命令
SUDO_CMD=""

#主机匹配模式
PATTERN=""

#要执行命令的主机列表
HOSTLIST=()

#要执行的命令
CMDLIST=""

#要执行的模块
MODULE=""

#模块参数
MODULE_ARGS=""

#自定义脚本路径
BATCH_FILE=""

#冗余模式
VERBOSE=""



###############################################
#                 功 能 函 数                 #
###############################################

usage() {
    cat <<EOF
Usage: $(basename $0) <host-pattern> [option]...

Options:
  -m <module>             指定要执行的模块
  -a <module_args>        模块参数
  -b <batch_file>         执行批量脚本文件
  -h <hosts_file>         指定hosts文件路径
  -u <user>               ssh用户
  -p <port>               ssh端口
  -s <shell>              远程主机shell
  -i <private_key_file>   私钥路径
  -f <forks>              并发数
  -o <ssh_args>           ssh连接选项
  -t <ssh_timeout>        ssh连接超时时间
  -v <verbose_mode>       更详细的输出
EOF
    
    exit 1
}


success() {
    echo -e "\033[32m$@\033[0m"
    echo "$@" >> "$LOG_FILE"
}


failed() {
    echo -e "\033[31m$@\033[0m" >&2
    echo -e "$@" >> "$LOG_FILE"
}


error() {
    echo -e "\033[31m$@\033[0m" >&2
    exit 1
}


#创建本地临时目录，保存模块执行结果
create_local_temp_dir() {
    local temp_dir="${TEMP_DIR%%/20*}"
    [[ -d "$temp_dir" ]] && rm -rf "${temp_dir}"/20* &>/dev/null
    mkdir -p $TEMP_DIR
}


#检查模块执行结果
result_check() {
    local rc="$1"
    local host="$2"

    if [[ "$rc" -eq 0 ]]; then
        if [[ -n "$VERBOSE" ]]; then
            success "$host | success | rc=0 >>"
            awk '{print "\033[32m"host":\033[0m "$0;print host": "$0 >>"'$LOG_FILE'"}' \
                host="$host" "${TEMP_DIR}/${host}.success"
        else
            success "$host | success | rc=0"
        fi
    else
        failed "$host | failed | rc=${rc} >>\n$(cat ${TEMP_DIR}/${host}.failed)"
    fi
}


#解析hosts文件
hostfile_parse() {
    local match_hosts= host=

    #文件存在
    [[ -f "$HOSTS_FILE" ]] || error "$HOSTS_FILE does not exist!"

    #匹配组
    if grep "^\[$PATTERN\]" "$HOSTS_FILE" &>/dev/null; then
        #获取该组下所有主机
        match_hosts="$(sed -n "/^\[$PATTERN\]/,/^\[/p" "$HOSTS_FILE" | sed '/^\[/d' | sed '/^#/d' | sort | uniq)"
        for host in $match_hosts; do
            #添加要执行的主机到HOSTLIST数组中
            HOSTLIST+=("$host")
        done
    #匹配单个IP
    elif [[ "$PATTERN" =~ ^[1-9][0-9]*\.[0-9]+\.[0-9]+\.[0-9]+$ ]] \
        && grep "^$PATTERN" "$HOSTS_FILE" &>/dev/null; then
        HOSTLIST+=("$PATTERN")
    #匹配所有主机
    elif [[ "$PATTERN" == "all" || "$PATTERN" == "*" ]]; then
        match_hosts="$(grep '^[1-9]' "$HOSTS_FILE" | sort | uniq)"
        for host in $match_hosts; do
            HOSTLIST+=("$host")
        done
    else
        error "$PATTERN does not match any host in $HOSTS_FILE"
    fi
}


#在远程主机执行命令
remote_cmd() {
    local host="$1"
    local quiet="${2:-no}"
    local private_key=

    if [[ -n "$PRIVATE_KEY_FILE" ]]; then
        private_key="-i $PRIVATE_KEY_FILE"
    fi

    #远程主机上执行命令文件
    #ssh -t host sudo cmd和ssh -tt host sudo cmd在后端执行各种报错
    #通过ssh -tt host "sudo cmd"解决
    ssh $ALLOC_TTY -l $REMOTE_USER -p $REMOTE_PORT $private_key $SSH_ARGS \
        $host "$SUDO_CMD $REMOTE_SHELL $REMOTE_CMD_FILE" \
        >"${TEMP_DIR}/${host}.success" 2>"${TEMP_DIR}/${host}.failed"

    #检查ssh执行结果
    local rc="$?"
    if [[ "$quiet" == "yes" ]]; then
        [[ "$rc" -ne 0 ]] && failed "$host: $(cat ${TEMP_DIR}/${host}.failed)"
    else
        result_check "$rc" "$host"
    fi
}


#在本地执行命令
local_cmd() {
    local host="$1"
    local quiet="${2:-no}"

    /bin/sh $CMD_FILE "$host" >"${TEMP_DIR}/${host}.success" 2>"${TEMP_DIR}/${host}.failed"

    #检查ssh执行结果
    local rc="$?"
    if [[ "$quiet" == "yes" ]]; then
        [[ "$rc" -ne 0 ]] && failed "$host: $(cat ${TEMP_DIR}/${host}.failed)"
    else
        result_check "$rc" "$host"
    fi
}


#传输命令文件到远程主机
scp_file() {
    local host="$1"
    local private_key=

    if [[ -n "$PRIVATE_KEY_FILE" ]]; then
        private_key="-i $PRIVATE_KEY_FILE"
    fi

    rsync -az --delete --progress \
        -e "ssh -l $REMOTE_USER -p $REMOTE_PORT $private_key $SSH_ARGS" \
        "${TEMP_DIR%%/20*}/" "$host":"${REMOTE_TEMP_DIR%%/20*}/" \
        >/dev/null 2>"${TEMP_DIR}/${host}.failed"

    if [[ "$?" -ne 0 ]]; then
        failed "$host: $(cat ${TEMP_DIR}/${host}.failed)"
    fi
}


#并发控制
parall_run() {
    local module="${1:-remote_cmd}"
    shift

    #建立命名管道文件
    local pipe="$(mktemp -u)" 
    mkfifo "$pipe" 
    #将文件$pipe绑定到文件描述符5 
    exec 5<>"$pipe"
    rm -f "$pipe" 

    #往命名管道存入值，存入多少个值就表示并发量多大
    for ((i=1;i<=${FORKS};i++)); do 
        echo >&5
    done 
    
    for host in ${HOSTLIST[@]}; do
        #从命名管道读取一个值
        #如果此时命名管道中没有值，read会阻塞直到读取到一个值  
        read -u 5
        #执行具体的模块，执行完后放入一个值到命名管道
        ($module "$host" "$@"; echo >&5) &
    done

    #等待所有后台进程执行完毕
    wait 

    #美化输出，TASK间以一个空行分割
    #[[ "$module" != "scp_file" ]] && echo && echo >> "$LOG_FILE"

    #关闭文件描述符5
    exec 5>&-
}


#####################################
#            模 块 列 表            #
#####################################

#在远程主机上sudo执行
#sudo [-u sudo_user] [-x sudo_args] -m module -a "module_args"
#options:
#  -u sudo_user: 指定sudo哪个用户
#  -x sudo_args: 指定sudo命令参数
#  -m module: 以sudo执行的模块名
#  -a module_args: 模块参数
sudo() {
    local module= module_args=

    while getopts :m:a:u:x: option; do
        case "$option" in
            m) module="$OPTARG";;
            a) module_args="$OPTARG";;
            u) SUDO_USER="$OPTARG";;
            x) SUDO_ARGS="$OPTARG";;
            \?) error "sudo: invalid option -${OPTARG}";;
            \:) error "sudo: must provide a value for -${OPTARG} option";;
        esac
    done
    #处理完选项，$1变为非选项参数
    shift $(($OPTIND - 1)) 
    unset OPTIND

    if [[ -z "$module" || -z "$module_args" ]]; then
        error "sudo: must provide the -m and -a options"
    fi

    #使用sudo时要为ssh连接分配一个伪终端，不然报错
    ALLOC_TTY="-tt"
    SUDO_CMD="sudo -u $SUDO_USER $SUDO_ARGS"

    #执行模块
    $module $module_args
    
    #执行完将全局变量还原，不然会影响下一个模块执行
    ALLOC_TTY="-T"
    SUDO_CMD=""
}


#在远程主机上执行指定命令
#Usage: command "cmd..."
command() {
    #$1为空
    [[ -z "${1:-}" ]] && error "command: must provide one command to execute"

    #构造命令文件
    cat <<EOF > "$CMD_FILE"
set -o errexit
$@ 
EOF

    echo "TASK - command: $@" | tee -a "$LOG_FILE"
    #传输命令文件
    parall_run scp_file
    #远程执行命令文件
    parall_run
}


#检查远程主机是否存活
#Usage: ping
ping() {
    local ping_cmd=

    if which fping &>/dev/null; then
        ping_cmd="$(which fping)"
    else
        ping_cmd="$(which ping) -c 4 -q"
    fi

    cat <<EOF >"$CMD_FILE"
$ping_cmd \$1
EOF

    echo "TASK - ping" | tee -a "$LOG_FILE"
    #批量执行
    parall_run local_cmd
}


#管理文件/目录属性
#Usage: file [option]... path
#Options:
#  -u owner: 属主，可选，默认值同"$REMOTE_USER"全局变量
#  -g group: 属组，可选，默认值同"$REMOTE_USER"全局变量
#  -m mode: 权限，可选，默认不处理文件权限
#  -r/-R: 是否递归处理目录，可选，默认不递归处理目录
file() {
    local owner="$REMOTE_USER"
    local group="$owner"
    local mode= 
    local recursive=
    local cmd=

    while getopts :u:g:m:rR option; do
        case "$option" in
            u) owner="$OPTARG";;
            g) group="$OPTARG";;
            m) mode="$OPTARG";;
            r|R) recursive="-R";;
            \?) error "file: invalid option -${OPTARG}";;
            \:) error "file: must provide a value for -${OPTARG} option";;
        esac
    done
    #处理完选项，$1变为非选项参数
    shift $(($OPTIND - 1)) 
    unset OPTIND

    #至少要指定一个路径
    [[ -n "$1" ]] || error "file: must specify a path"

    #命令构造
    if [[ -n "$mode" ]]; then
        cmd="chmod $recursive $mode $@"
    fi
    cat <<EOF >"$CMD_FILE"
set -o errexit
chown $recursive ${owner}:${group} $@
$cmd
EOF

    echo "TASK - file: $@" | tee -a "$LOG_FILE"
    #传输命令文件
    parall_run scp_file
    #远程执行命令文件
    parall_run
}


#传输文件/目录到远程主机
#Usage: copy [-bf] -s source_path -d destination_path
#Options:
#  -s path: 源文件路径
#  -d path: 远程主机上的目的路径
#  -b: 先将目的文件备份再覆盖(备份时会加上一个时间戳)，默认不会备份目的文件
#  -f: 如果目的文件存在则不会覆盖，默认不管目的文件存不存在都会覆盖
copy() {
    local src=
    local dest=
    local backup="no"
    local force="yes"
    local private_key=

    while getopts :s:d:bf option; do
        case "$option" in
            s) src="$OPTARG";;
            d) dest="$OPTARG";;
            b) backup="yes";;
            f) force="no";;
            \?) error "copy: invalid option -${OPTARG}";;
            \:) error "copy: must provide a value for -${OPTARG} option";;
        esac
    done
    #处理完选项，$1变为非选项参数
    shift $(($OPTIND - 1)) 
    unset OPTIND

    [[ -z "$src" || -z "$dest" ]] && error "copy: must provide the -s and -d options"
    [[ -e "$src" ]] || error "copy: $src does not exist"

    echo "TASK - copy: $src -> $dest" | tee -a "$LOG_FILE"

    #在远程主机执行的命令
    cat <<EOF >"$CMD_FILE"
set -o errexit

if [[ "$backup" == "yes" ]]; then
    #目的路径是一个目录，且目录末尾有/
    if [[ -d "$dest" && "${dest%/}" != "$dest" ]]; then
        :
    else
        mv "$dest" "${dest}_\$(date +%Y%m%d%H%M%S)"
    fi
fi

mv "${REMOTE_TEMP_DIR}/\$(basename $src)" "$dest"
EOF
    #先把命令文件传到远程主机，也用于保证远程主机临时目录一定存在
    parall_run scp_file

    if [[ -n "$PRIVATE_KEY_FILE" ]]; then
        private_key="-i $PRIVATE_KEY_FILE"
    fi
    #在本地执行的命令
    #把文件放到远程主机$REMOTE_TEMP_DIR下，然后再move到对应位置
    cat <<EOF >"$CMD_FILE"
rsync -az --progress \\
    -e "ssh -l $REMOTE_USER -p $REMOTE_PORT $private_key $SSH_ARGS" \\
    "$src" \$1:"${REMOTE_TEMP_DIR}/"
EOF
    parall_run local_cmd yes

    #执行远程主机命令文件
    parall_run
}


#通过yum包管理工具安装rpm包
#Usage：yum []
#--nogpgcheck
yum() {
    cat <<EOF >"$CMD_FILE"
set -o errexit
yum -y install $pkg
EOF
}

########################
#     模块列表结束     #
########################


#解析命令行参数
cmdline_arguments_parse() {
    if [[ "$#" -lt 3 ]]; then
        usage
    fi

    #第一个参数必须为模式字符串
    if [[ -n "$1" && "${1#-}" == "$1" ]]; then
        PATTERN="$1"
        shift
    else
        usage
    fi

    while getopts :m:a:b:h:u:p:s:i:f:o:t:v option; do
        case "$option" in
        m)
            MODULE="$OPTARG"
            ;;
        a)
            MODULE_ARGS="$OPTARG"
            ;;
        b)
            BATCH_FILE="$OPTARG"
            ;;
        h)
            HOSTS_FILE="$OPTARG"
            ;;
        u)
            REMOTE_USER="$OPTARG"
            ;;
        p)
            REMOTE_PORT="$OPTARG"
            ;;
        s)
            REMOTE_SHELL="$OPTARG"
            ;;
        i)
            PRIVATE_KEY_FILE="$OPTARG"
            ;;
        f)
            FORKS="$OPTARG"
            ;;
        o)
            SSH_ARGS="$SSH_ARGS -o $OPTARG"
            ;;
        t)
            SSH_TIMEOUT="$OPTARG"
            ;;
        v)
            VERBOSE="yes"
            ;;
        \?)
            error "invalid option: -${OPTARG}"
            ;;
        \:)
            error "must provide a value for -${OPTARG} option"
            ;;
        esac
    done

    #OPTIND是全局变量，会影响到其他模块的getopts
    #每次通过getopts处理完选项后都要unset掉
    unset OPTIND
    
    #为了命令行-i参数和默认的全局变量SSH_TIMEOUT都能生效，所以放在这里
    SSH_ARGS="$SSH_ARGS -o ConnectTimeout=${SSH_TIMEOUT}"
}


main() {
    #解析命令行参数
    cmdline_arguments_parse "$@"
    #解析hosts文件
    hostfile_parse
    #创建本地临时目录
    create_local_temp_dir

    #记录开始执行时间到日志文件
    echo "=== $DATE ===" >> "$LOG_FILE"

    if [[ -n "$BATCH_FILE" ]]; then
        [[ -f "$BATCH_FILE" ]] || error "$BATCH_FILE does not exist!"
        #执行脚本
        . "$BATCH_FILE"
    elif [[ -n "$MODULE" ]]; then
        $MODULE $MODULE_ARGS
    elif [[ -z "$MODULE" && -n "$MODULE_ARGS" ]]; then
        #如果不提供-m但是提供-a参数，则默认使用command模块
        command "$MODULE_ARGS"
    else
        failed "nothing to do"
        usage
    fi
}


main "$@"

